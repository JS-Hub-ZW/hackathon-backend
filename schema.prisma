// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource sqlite {
  url      = env("DATABASE_URL")
  provider = "sqlite"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id               String   @id @default(cuid())
  name             String   @default("")
  email            String   @unique @default("")
  password         String
  posts            Post[]   @relation("Post_author")
  role             String?  @default("guest")
  from_Hacker_user Hacker[] @relation("Hacker_user")
  from_Hoster_user Hoster[] @relation("Hoster_user")
}

model Post {
  id          String    @id @default(cuid())
  title       String    @default("")
  status      String?   @default("draft")
  content     String    @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  publishDate DateTime?
  author      User?     @relation("Post_author", fields: [authorId], references: [id])
  authorId    String?   @map("author")
  tags        Tag[]     @relation("Post_tags")

  @@index([authorId])
}

model Tag {
  id    String @id @default(cuid())
  name  String @default("")
  posts Post[] @relation("Post_tags")
}

model Hackathon {
  id                       String        @id @default(cuid())
  approved                 Int?
  name                     String        @default("")
  type                     String?       @default("online")
  maxParticipants          Int?
  participants             Int?
  date                     DateTime?
  prices                   Int?
  location                 String        @default("")
  description              String        @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  rules                    String        @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  landscapeImage_filesize  Int?
  landscapeImage_extension String?
  landscapeImage_width     Int?
  landscapeImage_height    Int?
  landscapeImage_mode      String?
  landscapeImage_id        String?
  potraitImage_filesize    Int?
  potraitImage_extension   String?
  potraitImage_width       Int?
  potraitImage_height      Int?
  potraitImage_mode        String?
  potraitImage_id          String?
  tags                     HackTag[]     @relation("Hackathon_tags")
  applications             Application[] @relation("Application_hackathon")
  from_Hoster_hackathons   Hoster[]      @relation("Hoster_hackathons")
}

model HackTag {
  id         String      @id @default(cuid())
  name       String      @default("")
  hackathons Hackathon[] @relation("Hackathon_tags")
}

model Application {
  id                       String     @id @default(cuid())
  authorized               Int?
  message                  String     @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  hacker                   Hacker?    @relation("Application_hacker", fields: [hackerId], references: [id])
  hackerId                 String?    @map("hacker")
  hackathon                Hackathon? @relation("Application_hackathon", fields: [hackathonId], references: [id])
  hackathonId              String?    @map("hackathon")
  from_Hacker_applications Hacker[]   @relation("Hacker_applications")

  @@index([hackerId])
  @@index([hackathonId])
}

model Hacker {
  id                      String        @id @default(cuid())
  image                   String        @default("")
  linkedin                String        @default("")
  github                  String        @default("")
  gitlab                  String        @default("")
  user                    User?         @relation("Hacker_user", fields: [userId], references: [id])
  userId                  String?       @map("user")
  applications            Application[] @relation("Hacker_applications")
  subscribed              Int?
  from_Application_hacker Application[] @relation("Application_hacker")

  @@index([userId])
}

model Hoster {
  id         String      @id @default(cuid())
  image      String      @default("")
  name       String      @default("")
  location   String      @default("")
  linkedin   String      @default("")
  twitter    String      @default("")
  facebook   String      @default("")
  hackathons Hackathon[] @relation("Hoster_hackathons")
  user       User?       @relation("Hoster_user", fields: [userId], references: [id])
  userId     String?     @map("user")
  subscribed Int?

  @@index([userId])
}