# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  role: String
  hacker: Hacker
  hoster: Hoster
  hackathons: Hackathon
  applications(
    where: ApplicationWhereInput! = {}
    orderBy: [ApplicationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Application!]
  applicationsCount(where: ApplicationWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  posts: PostManyRelationFilter
  role: StringNullableFilter
  hacker: HackerWhereInput
  hoster: HosterWhereInput
  hackathons: HackathonWhereInput
  applications: ApplicationManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input ApplicationManyRelationFilter {
  every: ApplicationWhereInput
  some: ApplicationWhereInput
  none: ApplicationWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  role: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForUpdateInput
  role: String
  hacker: HackerRelateToOneForUpdateInput
  hoster: HosterRelateToOneForUpdateInput
  hackathons: HackathonRelateToOneForUpdateInput
  applications: ApplicationRelateToManyForUpdateInput
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input HackerRelateToOneForUpdateInput {
  create: HackerCreateInput
  connect: HackerWhereUniqueInput
  disconnect: Boolean
}

input HosterRelateToOneForUpdateInput {
  create: HosterCreateInput
  connect: HosterWhereUniqueInput
  disconnect: Boolean
}

input HackathonRelateToOneForUpdateInput {
  create: HackathonCreateInput
  connect: HackathonWhereUniqueInput
  disconnect: Boolean
}

input ApplicationRelateToManyForUpdateInput {
  disconnect: [ApplicationWhereUniqueInput!]
  set: [ApplicationWhereUniqueInput!]
  create: [ApplicationCreateInput!]
  connect: [ApplicationWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForCreateInput
  role: String
  hacker: HackerRelateToOneForCreateInput
  hoster: HosterRelateToOneForCreateInput
  hackathons: HackathonRelateToOneForCreateInput
  applications: ApplicationRelateToManyForCreateInput
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input HackerRelateToOneForCreateInput {
  create: HackerCreateInput
  connect: HackerWhereUniqueInput
}

input HosterRelateToOneForCreateInput {
  create: HosterCreateInput
  connect: HosterWhereUniqueInput
}

input HackathonRelateToOneForCreateInput {
  create: HackathonCreateInput
  connect: HackathonWhereUniqueInput
}

input ApplicationRelateToManyForCreateInput {
  create: [ApplicationCreateInput!]
  connect: [ApplicationWhereUniqueInput!]
}

type Post {
  id: ID!
  title: String
  status: String
  content: Post_content_Document
  publishDate: DateTime
  author: User
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  status: StringNullableFilter
  publishDate: DateTimeNullableFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
}

input PostUpdateInput {
  title: String
  status: String
  content: JSON
  publishDate: DateTime
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  status: String
  content: JSON
  publishDate: DateTime
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

type Hackathon {
  id: ID!
  approved: Int
  name: String
  type: String
  maxParticipants: Int
  participants: Int
  date: DateTime
  prices: Int
  location: String
  description: Hackathon_description_Document
  rules: Hackathon_rules_Document
  landscapeImage: ImageFieldOutput
  potraitImage: ImageFieldOutput
  tags(
    where: HackTagWhereInput! = {}
    orderBy: [HackTagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [HackTag!]
  tagsCount(where: HackTagWhereInput! = {}): Int
  applications(
    where: ApplicationWhereInput! = {}
    orderBy: [ApplicationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Application!]
  applicationsCount(where: ApplicationWhereInput! = {}): Int
  user: User
}

type Hackathon_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Hackathon_rules_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

interface ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input HackathonWhereUniqueInput {
  id: ID
}

type LocalImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

type CloudImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

input HackathonWhereInput {
  AND: [HackathonWhereInput!]
  OR: [HackathonWhereInput!]
  NOT: [HackathonWhereInput!]
  id: IDFilter
  approved: IntNullableFilter
  name: StringFilter
  type: StringNullableFilter
  maxParticipants: IntNullableFilter
  participants: IntNullableFilter
  date: DateTimeNullableFilter
  prices: IntNullableFilter
  location: StringFilter
  tags: HackTagManyRelationFilter
  applications: ApplicationManyRelationFilter
  user: UserWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input HackTagManyRelationFilter {
  every: HackTagWhereInput
  some: HackTagWhereInput
  none: HackTagWhereInput
}

input HackathonOrderByInput {
  id: OrderDirection
  approved: OrderDirection
  name: OrderDirection
  type: OrderDirection
  maxParticipants: OrderDirection
  participants: OrderDirection
  date: OrderDirection
  prices: OrderDirection
  location: OrderDirection
}

input HackathonUpdateInput {
  approved: Int
  name: String
  type: String
  maxParticipants: Int
  participants: Int
  date: DateTime
  prices: Int
  location: String
  description: JSON
  rules: JSON
  landscapeImage: ImageFieldInput
  potraitImage: ImageFieldInput
  tags: HackTagRelateToManyForUpdateInput
  applications: ApplicationRelateToManyForUpdateInput
  user: UserRelateToOneForUpdateInput
}

input ImageFieldInput {
  upload: Upload
  ref: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input HackTagRelateToManyForUpdateInput {
  disconnect: [HackTagWhereUniqueInput!]
  set: [HackTagWhereUniqueInput!]
  create: [HackTagCreateInput!]
  connect: [HackTagWhereUniqueInput!]
}

input HackathonUpdateArgs {
  where: HackathonWhereUniqueInput!
  data: HackathonUpdateInput!
}

input HackathonCreateInput {
  approved: Int
  name: String
  type: String
  maxParticipants: Int
  participants: Int
  date: DateTime
  prices: Int
  location: String
  description: JSON
  rules: JSON
  landscapeImage: ImageFieldInput
  potraitImage: ImageFieldInput
  tags: HackTagRelateToManyForCreateInput
  applications: ApplicationRelateToManyForCreateInput
  user: UserRelateToOneForCreateInput
}

input HackTagRelateToManyForCreateInput {
  create: [HackTagCreateInput!]
  connect: [HackTagWhereUniqueInput!]
}

type HackTag {
  id: ID!
  name: String
  hackathons(
    where: HackathonWhereInput! = {}
    orderBy: [HackathonOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Hackathon!]
  hackathonsCount(where: HackathonWhereInput! = {}): Int
}

input HackTagWhereUniqueInput {
  id: ID
}

input HackTagWhereInput {
  AND: [HackTagWhereInput!]
  OR: [HackTagWhereInput!]
  NOT: [HackTagWhereInput!]
  id: IDFilter
  name: StringFilter
  hackathons: HackathonManyRelationFilter
}

input HackathonManyRelationFilter {
  every: HackathonWhereInput
  some: HackathonWhereInput
  none: HackathonWhereInput
}

input HackTagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input HackTagUpdateInput {
  name: String
  hackathons: HackathonRelateToManyForUpdateInput
}

input HackathonRelateToManyForUpdateInput {
  disconnect: [HackathonWhereUniqueInput!]
  set: [HackathonWhereUniqueInput!]
  create: [HackathonCreateInput!]
  connect: [HackathonWhereUniqueInput!]
}

input HackTagUpdateArgs {
  where: HackTagWhereUniqueInput!
  data: HackTagUpdateInput!
}

input HackTagCreateInput {
  name: String
  hackathons: HackathonRelateToManyForCreateInput
}

input HackathonRelateToManyForCreateInput {
  create: [HackathonCreateInput!]
  connect: [HackathonWhereUniqueInput!]
}

type Application {
  id: ID!
  authorized: Int
  message: Application_message_Document
  hacker: Hacker
  hackathon: Hackathon
  user: User
}

type Application_message_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ApplicationWhereUniqueInput {
  id: ID
}

input ApplicationWhereInput {
  AND: [ApplicationWhereInput!]
  OR: [ApplicationWhereInput!]
  NOT: [ApplicationWhereInput!]
  id: IDFilter
  authorized: IntNullableFilter
  hacker: HackerWhereInput
  hackathon: HackathonWhereInput
  user: UserWhereInput
}

input ApplicationOrderByInput {
  id: OrderDirection
  authorized: OrderDirection
}

input ApplicationUpdateInput {
  authorized: Int
  message: JSON
  hacker: HackerRelateToOneForUpdateInput
  hackathon: HackathonRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
}

input ApplicationUpdateArgs {
  where: ApplicationWhereUniqueInput!
  data: ApplicationUpdateInput!
}

input ApplicationCreateInput {
  authorized: Int
  message: JSON
  hacker: HackerRelateToOneForCreateInput
  hackathon: HackathonRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
}

type Hacker {
  id: ID!
  image: String
  linkedin: String
  github: String
  gitlab: String
  user: User
  subscribed: Int
}

input HackerWhereUniqueInput {
  id: ID
}

input HackerWhereInput {
  AND: [HackerWhereInput!]
  OR: [HackerWhereInput!]
  NOT: [HackerWhereInput!]
  id: IDFilter
  image: StringFilter
  linkedin: StringFilter
  github: StringFilter
  gitlab: StringFilter
  user: UserWhereInput
  subscribed: IntNullableFilter
}

input HackerOrderByInput {
  id: OrderDirection
  image: OrderDirection
  linkedin: OrderDirection
  github: OrderDirection
  gitlab: OrderDirection
  subscribed: OrderDirection
}

input HackerUpdateInput {
  image: String
  linkedin: String
  github: String
  gitlab: String
  user: UserRelateToOneForUpdateInput
  subscribed: Int
}

input HackerUpdateArgs {
  where: HackerWhereUniqueInput!
  data: HackerUpdateInput!
}

input HackerCreateInput {
  image: String
  linkedin: String
  github: String
  gitlab: String
  user: UserRelateToOneForCreateInput
  subscribed: Int
}

type Hoster {
  id: ID!
  image: String
  name: String
  location: String
  linkedin: String
  twitter: String
  facebook: String
  user: User
  subscribed: Int
}

input HosterWhereUniqueInput {
  id: ID
}

input HosterWhereInput {
  AND: [HosterWhereInput!]
  OR: [HosterWhereInput!]
  NOT: [HosterWhereInput!]
  id: IDFilter
  image: StringFilter
  name: StringFilter
  location: StringFilter
  linkedin: StringFilter
  twitter: StringFilter
  facebook: StringFilter
  user: UserWhereInput
  subscribed: IntNullableFilter
}

input HosterOrderByInput {
  id: OrderDirection
  image: OrderDirection
  name: OrderDirection
  location: OrderDirection
  linkedin: OrderDirection
  twitter: OrderDirection
  facebook: OrderDirection
  subscribed: OrderDirection
}

input HosterUpdateInput {
  image: String
  name: String
  location: String
  linkedin: String
  twitter: String
  facebook: String
  user: UserRelateToOneForUpdateInput
  subscribed: Int
}

input HosterUpdateArgs {
  where: HosterWhereUniqueInput!
  data: HosterUpdateInput!
}

input HosterCreateInput {
  image: String
  name: String
  location: String
  linkedin: String
  twitter: String
  facebook: String
  user: UserRelateToOneForCreateInput
  subscribed: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createHackathon(data: HackathonCreateInput!): Hackathon
  createHackathons(data: [HackathonCreateInput!]!): [Hackathon]
  updateHackathon(
    where: HackathonWhereUniqueInput!
    data: HackathonUpdateInput!
  ): Hackathon
  updateHackathons(data: [HackathonUpdateArgs!]!): [Hackathon]
  deleteHackathon(where: HackathonWhereUniqueInput!): Hackathon
  deleteHackathons(where: [HackathonWhereUniqueInput!]!): [Hackathon]
  createHackTag(data: HackTagCreateInput!): HackTag
  createHackTags(data: [HackTagCreateInput!]!): [HackTag]
  updateHackTag(
    where: HackTagWhereUniqueInput!
    data: HackTagUpdateInput!
  ): HackTag
  updateHackTags(data: [HackTagUpdateArgs!]!): [HackTag]
  deleteHackTag(where: HackTagWhereUniqueInput!): HackTag
  deleteHackTags(where: [HackTagWhereUniqueInput!]!): [HackTag]
  createApplication(data: ApplicationCreateInput!): Application
  createApplications(data: [ApplicationCreateInput!]!): [Application]
  updateApplication(
    where: ApplicationWhereUniqueInput!
    data: ApplicationUpdateInput!
  ): Application
  updateApplications(data: [ApplicationUpdateArgs!]!): [Application]
  deleteApplication(where: ApplicationWhereUniqueInput!): Application
  deleteApplications(where: [ApplicationWhereUniqueInput!]!): [Application]
  createHacker(data: HackerCreateInput!): Hacker
  createHackers(data: [HackerCreateInput!]!): [Hacker]
  updateHacker(where: HackerWhereUniqueInput!, data: HackerUpdateInput!): Hacker
  updateHackers(data: [HackerUpdateArgs!]!): [Hacker]
  deleteHacker(where: HackerWhereUniqueInput!): Hacker
  deleteHackers(where: [HackerWhereUniqueInput!]!): [Hacker]
  createHoster(data: HosterCreateInput!): Hoster
  createHosters(data: [HosterCreateInput!]!): [Hoster]
  updateHoster(where: HosterWhereUniqueInput!, data: HosterUpdateInput!): Hoster
  updateHosters(data: [HosterUpdateArgs!]!): [Hoster]
  deleteHoster(where: HosterWhereUniqueInput!): Hoster
  deleteHosters(where: [HosterWhereUniqueInput!]!): [Hoster]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  hackathons(
    where: HackathonWhereInput! = {}
    orderBy: [HackathonOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Hackathon!]
  hackathon(where: HackathonWhereUniqueInput!): Hackathon
  hackathonsCount(where: HackathonWhereInput! = {}): Int
  hackTags(
    where: HackTagWhereInput! = {}
    orderBy: [HackTagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [HackTag!]
  hackTag(where: HackTagWhereUniqueInput!): HackTag
  hackTagsCount(where: HackTagWhereInput! = {}): Int
  applications(
    where: ApplicationWhereInput! = {}
    orderBy: [ApplicationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Application!]
  application(where: ApplicationWhereUniqueInput!): Application
  applicationsCount(where: ApplicationWhereInput! = {}): Int
  hackers(
    where: HackerWhereInput! = {}
    orderBy: [HackerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Hacker!]
  hacker(where: HackerWhereUniqueInput!): Hacker
  hackersCount(where: HackerWhereInput! = {}): Int
  hosters(
    where: HosterWhereInput! = {}
    orderBy: [HosterOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Hoster!]
  hoster(where: HosterWhereUniqueInput!): Hoster
  hostersCount(where: HosterWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
